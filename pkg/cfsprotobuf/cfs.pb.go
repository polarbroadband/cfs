// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: cfs.proto

package cfsprotobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileCheckSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChkSum string `protobuf:"bytes,1,opt,name=ChkSum,proto3" json:"ChkSum,omitempty"`
}

func (x *FileCheckSum) Reset() {
	*x = FileCheckSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCheckSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCheckSum) ProtoMessage() {}

func (x *FileCheckSum) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCheckSum.ProtoReflect.Descriptor instead.
func (*FileCheckSum) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{0}
}

func (x *FileCheckSum) GetChkSum() string {
	if x != nil {
		return x.ChkSum
	}
	return ""
}

type LoadSpirentFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	SpirentURL string `protobuf:"bytes,3,opt,name=SpirentURL,proto3" json:"SpirentURL,omitempty"`
	SessionID  string `protobuf:"bytes,4,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
}

func (x *LoadSpirentFileRequest) Reset() {
	*x = LoadSpirentFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSpirentFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSpirentFileRequest) ProtoMessage() {}

func (x *LoadSpirentFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSpirentFileRequest.ProtoReflect.Descriptor instead.
func (*LoadSpirentFileRequest) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{1}
}

func (x *LoadSpirentFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *LoadSpirentFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *LoadSpirentFileRequest) GetSpirentURL() string {
	if x != nil {
		return x.SpirentURL
	}
	return ""
}

func (x *LoadSpirentFileRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type SCPFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath       string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	FileName       string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Host           string `protobuf:"bytes,3,opt,name=Host,proto3" json:"Host,omitempty"`
	RemoteFilePath string `protobuf:"bytes,4,opt,name=RemoteFilePath,proto3" json:"RemoteFilePath,omitempty"`
	Usr            string `protobuf:"bytes,5,opt,name=Usr,proto3" json:"Usr,omitempty"`
	Pwd            string `protobuf:"bytes,6,opt,name=Pwd,proto3" json:"Pwd,omitempty"`
}

func (x *SCPFileRequest) Reset() {
	*x = SCPFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCPFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPFileRequest) ProtoMessage() {}

func (x *SCPFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPFileRequest.ProtoReflect.Descriptor instead.
func (*SCPFileRequest) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{2}
}

func (x *SCPFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *SCPFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SCPFileRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SCPFileRequest) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

func (x *SCPFileRequest) GetUsr() string {
	if x != nil {
		return x.Usr
	}
	return ""
}

func (x *SCPFileRequest) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type CheckFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	ChkSum   string `protobuf:"bytes,3,opt,name=ChkSum,proto3" json:"ChkSum,omitempty"`
}

func (x *CheckFileRequest) Reset() {
	*x = CheckFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFileRequest) ProtoMessage() {}

func (x *CheckFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFileRequest.ProtoReflect.Descriptor instead.
func (*CheckFileRequest) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{3}
}

func (x *CheckFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CheckFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CheckFileRequest) GetChkSum() string {
	if x != nil {
		return x.ChkSum
	}
	return ""
}

type SvrStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Release string `protobuf:"bytes,2,opt,name=Release,proto3" json:"Release,omitempty"`
	Load    int64  `protobuf:"varint,3,opt,name=Load,proto3" json:"Load,omitempty"`
}

func (x *SvrStat) Reset() {
	*x = SvrStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvrStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvrStat) ProtoMessage() {}

func (x *SvrStat) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvrStat.ProtoReflect.Descriptor instead.
func (*SvrStat) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{4}
}

func (x *SvrStat) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SvrStat) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *SvrStat) GetLoad() int64 {
	if x != nil {
		return x.Load
	}
	return 0
}

type HealtzReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealtzReq) Reset() {
	*x = HealtzReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealtzReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealtzReq) ProtoMessage() {}

func (x *HealtzReq) ProtoReflect() protoreflect.Message {
	mi := &file_cfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealtzReq.ProtoReflect.Descriptor instead.
func (*HealtzReq) Descriptor() ([]byte, []int) {
	return file_cfs_proto_rawDescGZIP(), []int{5}
}

var File_cfs_proto protoreflect.FileDescriptor

var file_cfs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x66, 0x73,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x26, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x6b, 0x53,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x6b, 0x53, 0x75, 0x6d,
	0x22, 0x8e, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x69, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x69, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x70, 0x69, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x53, 0x43, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x73, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x73, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x77,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x77, 0x64, 0x22, 0x62, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x6b, 0x53,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x6b, 0x53, 0x75, 0x6d,
	0x22, 0x4b, 0x0a, 0x07, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x0b, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x7a, 0x52, 0x65, 0x71, 0x32, 0x9c, 0x02, 0x0a, 0x03, 0x63,
	0x66, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x7a, 0x12, 0x16, 0x2e, 0x63,
	0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x7a, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x69, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x43, 0x12, 0x23, 0x2e,
	0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x69, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x03, 0x53, 0x43, 0x50, 0x12, 0x1b, 0x2e, 0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x43, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e,
	0x63, 0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x62, 0x61, 0x6e, 0x64, 0x2f, 0x63, 0x66, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63,
	0x66, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cfs_proto_rawDescOnce sync.Once
	file_cfs_proto_rawDescData = file_cfs_proto_rawDesc
)

func file_cfs_proto_rawDescGZIP() []byte {
	file_cfs_proto_rawDescOnce.Do(func() {
		file_cfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cfs_proto_rawDescData)
	})
	return file_cfs_proto_rawDescData
}

var file_cfs_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cfs_proto_goTypes = []interface{}{
	(*FileCheckSum)(nil),           // 0: cfsprotobuf.FileCheckSum
	(*LoadSpirentFileRequest)(nil), // 1: cfsprotobuf.LoadSpirentFileRequest
	(*SCPFileRequest)(nil),         // 2: cfsprotobuf.SCPFileRequest
	(*CheckFileRequest)(nil),       // 3: cfsprotobuf.CheckFileRequest
	(*SvrStat)(nil),                // 4: cfsprotobuf.SvrStat
	(*HealtzReq)(nil),              // 5: cfsprotobuf.HealtzReq
}
var file_cfs_proto_depIdxs = []int32{
	5, // 0: cfsprotobuf.cfs.Healtz:input_type -> cfsprotobuf.HealtzReq
	1, // 1: cfsprotobuf.cfs.LoadSpirentTC:input_type -> cfsprotobuf.LoadSpirentFileRequest
	2, // 2: cfsprotobuf.cfs.SCP:input_type -> cfsprotobuf.SCPFileRequest
	3, // 3: cfsprotobuf.cfs.CheckFile:input_type -> cfsprotobuf.CheckFileRequest
	4, // 4: cfsprotobuf.cfs.Healtz:output_type -> cfsprotobuf.SvrStat
	0, // 5: cfsprotobuf.cfs.LoadSpirentTC:output_type -> cfsprotobuf.FileCheckSum
	0, // 6: cfsprotobuf.cfs.SCP:output_type -> cfsprotobuf.FileCheckSum
	0, // 7: cfsprotobuf.cfs.CheckFile:output_type -> cfsprotobuf.FileCheckSum
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cfs_proto_init() }
func file_cfs_proto_init() {
	if File_cfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCheckSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSpirentFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvrStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealtzReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cfs_proto_goTypes,
		DependencyIndexes: file_cfs_proto_depIdxs,
		MessageInfos:      file_cfs_proto_msgTypes,
	}.Build()
	File_cfs_proto = out.File
	file_cfs_proto_rawDesc = nil
	file_cfs_proto_goTypes = nil
	file_cfs_proto_depIdxs = nil
}
