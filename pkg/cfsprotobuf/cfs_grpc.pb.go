// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cfsprotobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CfsClient is the client API for Cfs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CfsClient interface {
	// healthckeck
	Healtz(ctx context.Context, in *HealtzReq, opts ...grpc.CallOption) (*SvrStat, error)
	// load Spirent tc file to chassis
	LoadSpirentTC(ctx context.Context, in *LoadSpirentFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error)
	// SCP file to remote host
	SCP(ctx context.Context, in *SCPFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error)
	// check if file exist on CFS server
	CheckFile(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error)
}

type cfsClient struct {
	cc grpc.ClientConnInterface
}

func NewCfsClient(cc grpc.ClientConnInterface) CfsClient {
	return &cfsClient{cc}
}

func (c *cfsClient) Healtz(ctx context.Context, in *HealtzReq, opts ...grpc.CallOption) (*SvrStat, error) {
	out := new(SvrStat)
	err := c.cc.Invoke(ctx, "/cfsprotobuf.cfs/Healtz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfsClient) LoadSpirentTC(ctx context.Context, in *LoadSpirentFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error) {
	out := new(FileCheckSum)
	err := c.cc.Invoke(ctx, "/cfsprotobuf.cfs/LoadSpirentTC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfsClient) SCP(ctx context.Context, in *SCPFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error) {
	out := new(FileCheckSum)
	err := c.cc.Invoke(ctx, "/cfsprotobuf.cfs/SCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfsClient) CheckFile(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*FileCheckSum, error) {
	out := new(FileCheckSum)
	err := c.cc.Invoke(ctx, "/cfsprotobuf.cfs/CheckFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CfsServer is the server API for Cfs service.
// All implementations must embed UnimplementedCfsServer
// for forward compatibility
type CfsServer interface {
	// healthckeck
	Healtz(context.Context, *HealtzReq) (*SvrStat, error)
	// load Spirent tc file to chassis
	LoadSpirentTC(context.Context, *LoadSpirentFileRequest) (*FileCheckSum, error)
	// SCP file to remote host
	SCP(context.Context, *SCPFileRequest) (*FileCheckSum, error)
	// check if file exist on CFS server
	CheckFile(context.Context, *CheckFileRequest) (*FileCheckSum, error)
	mustEmbedUnimplementedCfsServer()
}

// UnimplementedCfsServer must be embedded to have forward compatible implementations.
type UnimplementedCfsServer struct {
}

func (UnimplementedCfsServer) Healtz(context.Context, *HealtzReq) (*SvrStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healtz not implemented")
}
func (UnimplementedCfsServer) LoadSpirentTC(context.Context, *LoadSpirentFileRequest) (*FileCheckSum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSpirentTC not implemented")
}
func (UnimplementedCfsServer) SCP(context.Context, *SCPFileRequest) (*FileCheckSum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCP not implemented")
}
func (UnimplementedCfsServer) CheckFile(context.Context, *CheckFileRequest) (*FileCheckSum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFile not implemented")
}
func (UnimplementedCfsServer) mustEmbedUnimplementedCfsServer() {}

// UnsafeCfsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CfsServer will
// result in compilation errors.
type UnsafeCfsServer interface {
	mustEmbedUnimplementedCfsServer()
}

func RegisterCfsServer(s grpc.ServiceRegistrar, srv CfsServer) {
	s.RegisterService(&Cfs_ServiceDesc, srv)
}

func _Cfs_Healtz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealtzReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfsServer).Healtz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfsprotobuf.cfs/Healtz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfsServer).Healtz(ctx, req.(*HealtzReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cfs_LoadSpirentTC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSpirentFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfsServer).LoadSpirentTC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfsprotobuf.cfs/LoadSpirentTC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfsServer).LoadSpirentTC(ctx, req.(*LoadSpirentFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cfs_SCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCPFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfsServer).SCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfsprotobuf.cfs/SCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfsServer).SCP(ctx, req.(*SCPFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cfs_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfsServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfsprotobuf.cfs/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfsServer).CheckFile(ctx, req.(*CheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cfs_ServiceDesc is the grpc.ServiceDesc for Cfs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cfs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cfsprotobuf.cfs",
	HandlerType: (*CfsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healtz",
			Handler:    _Cfs_Healtz_Handler,
		},
		{
			MethodName: "LoadSpirentTC",
			Handler:    _Cfs_LoadSpirentTC_Handler,
		},
		{
			MethodName: "SCP",
			Handler:    _Cfs_SCP_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _Cfs_CheckFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cfs.proto",
}
